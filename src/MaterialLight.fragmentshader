#version 330 core
in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
uniform sampler2D prova;

uniform Material material;

uniform vec3 objectColor;
uniform vec3 lightPos;
uniform vec3 viewPos;
out vec4 color;

void main(){

float ambientStrength = 0.2f;
vec3 ambient = ambientStrength * vec3(texture(material.diffuse, TexCoords));

vec3 normal = normalize(Normal);
vec3 lightDir = normalize(lightPos - FragPos);

float diff = max(dot(normal, lightDir), 0.0);
vec3 diffuse = diff *  vec3(texture(material.diffuse, TexCoords));

float specularStrength = 0.5f;
vec3 viewDir = normalize(viewPos - FragPos);
vec3 reflectDir = reflect(-lightDir, normal);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
vec3 specular = specularStrength * spec *  vec3(texture(material.specular, TexCoords));

vec3 result = (ambient + diffuse + specular) * objectColor;
color = vec4(result, 1.0);

}                                                                                                                                                                                                             