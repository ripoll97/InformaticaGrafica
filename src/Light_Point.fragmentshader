#version 330 core
in vec3 Normal;
in vec3 FragPos;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

out vec4 color;

// Constants for the atenuation
float constant1 = 1.0;
float constant2 = 0.22;
float constant3 = 0.20;

void main(){

float ambientStrength = 0.2f;
vec3 ambient = ambientStrength * lightColor;

vec3 normal = normalize(Normal);
vec3 lightDir = normalize(lightPos - FragPos);

float diff = max(dot(normal, lightDir), 0.0);
vec3 diffuse = diff * lightColor;

float specularStrength = 0.5f;
vec3 viewDir = normalize(viewPos - FragPos);
vec3 reflectDir = reflect(-lightDir, normal);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
vec3 specular = specularStrength * spec * lightColor;

float d = length(lightPos - FragPos);
float atenuation = 1.0 / (constant1 + constant2 * d + constant3 * (d * d));

vec3 result = atenuation * (ambient + diffuse + specular) * objectColor;
color = vec4(result, 1.0);

}                                                                                                                                                                                                             