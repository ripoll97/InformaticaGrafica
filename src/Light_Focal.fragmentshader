#version 330 core
in vec3 Normal;
in vec3 FragPos;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

out vec4 color;


// Constants for the atenuation
float constant1 = 1.0;
float constant2 = 0.09;
float constant3 = 0.032;

void main(){

float ambientStrength = 0.2f;
vec3 ambient = ambientStrength * lightColor;

vec3 normal = normalize(Normal);
vec3 lightDir = normalize(lightPos - FragPos);

float diff = max(dot(normal, lightDir), 0.0);
vec3 diffuse = diff * lightColor;

float specularStrength = 0.5f;
vec3 viewDir = normalize(viewPos - FragPos);
vec3 reflectDir = reflect(-lightDir, normal);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
vec3 specular = specularStrength * spec * lightColor;

float d = length(lightPos - FragPos);
float atenuation = 1.0 / (constant1 + constant2 * d + constant3 * (d * d));

float theta = dot(lightDir, vec3(0.0, 1.0, 0.0));
float aperturaMax = cos(radians(20.0f));
float aperturaMin = cos(radians(12.5f));

float epsilon = aperturaMin - aperturaMax;
float inte = clamp((theta - aperturaMax) / epsilon, 0.0, 1.0);

if (theta > aperturaMax) {
	vec3 result = atenuation * (ambient * objectColor + diffuse * inte * objectColor + specular * objectColor * inte);
	color = vec4(result, 1.0);
}

else {
	vec3 result = atenuation * ambient * objectColor;
	color = vec4(result, 1.0);
}

}                                                                                                                                                                                                             